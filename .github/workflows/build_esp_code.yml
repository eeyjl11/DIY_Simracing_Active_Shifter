name: ESP-IDF Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  IDF_VERSION: v5.5
  # Choose stable locations so the cache captures them
  ESP_TOOLS_PATH: ${{ runner.home }}/esp/tools
  ESP_IDF_PATH: ${{ runner.home }}/esp/idf

jobs:
  lint:
    name: Lint (clang-tidy via ESP-IDF)
    runs-on: ubuntu-latest
    # Non-blocking on pushes, blocking on PRs
    continue-on-error: ${{ github.event_name == 'push' }}

    steps:
      - uses: actions/checkout@v4

      # Reuse toolchains & IDF between runs
      - name: Cache ESP-IDF & tools
        uses: actions/cache@v4
        with:
          path: |
            ~/.espressif
            ${{ env.ESP_TOOLS_PATH }}
            ${{ env.ESP_IDF_PATH }}
          key: ${{ runner.os }}-espidf-${{ env.IDF_VERSION }}-${{ hashFiles('**/CMakeLists.txt', '**/idf_component.yml', 'idf_component.yml', 'managed_components/**', '**/requirements.txt', 'requirements.txt', 'sdkconfig') }}
          restore-keys: |
            ${{ runner.os }}-espidf-${{ env.IDF_VERSION }}-

      - name: ESP-IDF Setup
        uses: espressif/install-esp-idf-action@v1
        with:
          version: ${{ env.IDF_VERSION }}
          path: ${{ env.ESP_IDF_PATH }}
          tools-path: ${{ env.ESP_TOOLS_PATH }}

      - name: Install ESP-IDF tools (incl. esp-clang)
        shell: bash
        run: |
          set -euo pipefail
          # Ensure core tools exist (fast no-op if cached)
          python3 "$IDF_PATH/tools/idf_tools.py" install
          # Install esp-clang for clang-tidy
          python3 "$IDF_PATH/tools/idf_tools.py" install esp-clang
          # Activate now that tools exist
          . "$IDF_PATH/export.sh"
          idf.py --version

      - name: Run clang-tidy
        shell: bash
        env:
          IDF_TOOLCHAIN: clang
        run: |
          set -e
          . "$IDF_PATH/export.sh"
          idf.py set-target esp32s3
          idf.py clang-check
          # Optional HTML report
          python -m pip install codereport || true
          idf.py clang-html-report || true

      - name: Upload lint artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: esp-idf-clang-tidy-report
          path: |
            warnings.txt
            html_report/

  build:
    name: Build (gated by lint on PRs)
    runs-on: ubuntu-latest
    needs: lint
    # Non-blocking on pushes, blocking on PRs
    continue-on-error: ${{ github.event_name == 'push' }}

    steps:
      - uses: actions/checkout@v4

      # Same cache key -> hits the artifacts produced during lint job runs
      - name: Restore ESP-IDF & tools cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.espressif
            ${{ env.ESP_TOOLS_PATH }}
            ${{ env.ESP_IDF_PATH }}
          key: ${{ runner.os }}-espidf-${{ env.IDF_VERSION }}-${{ hashFiles('**/CMakeLists.txt', '**/idf_component.yml', 'idf_component.yml', 'managed_components/**', '**/requirements.txt', 'requirements.txt', 'sdkconfig') }}
          restore-keys: |
            ${{ runner.os }}-espidf-${{ env.IDF_VERSION }}-

      - name: ESP-IDF Setup
        uses: espressif/install-esp-idf-action@v1
        with:
          version: ${{ env.IDF_VERSION }}
          path: ${{ env.ESP_IDF_PATH }}
          tools-path: ${{ env.ESP_TOOLS_PATH }}

      - name: Install ESP-IDF tools
        shell: bash
        run: |
          set -euo pipefail
          # Fast if cache hit; ensures required toolchains are present
          python3 "$IDF_PATH/tools/idf_tools.py" install
          . "$IDF_PATH/export.sh"
          idf.py --version

      - name: Build
        shell: bash
        run: |
          set -e
          . "$IDF_PATH/export.sh"
          idf.py set-target esp32s3
          idf.py build
